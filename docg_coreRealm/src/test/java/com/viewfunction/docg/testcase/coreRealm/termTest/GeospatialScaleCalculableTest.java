package com.viewfunction.docg.testcase.coreRealm.termTest;

import com.viewfunction.docg.coreRealm.realmServiceCore.exception.CoreRealmServiceException;
import com.viewfunction.docg.coreRealm.realmServiceCore.exception.CoreRealmServiceRuntimeException;
import com.viewfunction.docg.coreRealm.realmServiceCore.feature.GeospatialScaleCalculable;
import com.viewfunction.docg.coreRealm.realmServiceCore.payload.ConceptionEntityValue;
import com.viewfunction.docg.coreRealm.realmServiceCore.term.ConceptionEntity;
import com.viewfunction.docg.coreRealm.realmServiceCore.term.ConceptionKind;
import com.viewfunction.docg.coreRealm.realmServiceCore.term.CoreRealm;
import com.viewfunction.docg.coreRealm.realmServiceCore.util.CoreRealmStorageImplTech;
import com.viewfunction.docg.coreRealm.realmServiceCore.util.factory.RealmTermFactory;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeospatialScaleCalculableTest {

    private static String testRealmName = "UNIT_TEST_Realm";

    @BeforeTest
    public void initData(){
        System.out.println("--------------------------------------------------");
        System.out.println("Init unit test data for GeospatialScaleCalculableTest");
        System.out.println("--------------------------------------------------");
    }

    @Test
    public void testGeospatialScaleCalculableFunction() throws CoreRealmServiceRuntimeException{
        CoreRealm coreRealm = RealmTermFactory.getDefaultCoreRealm();
        //coreRealm.openGlobalSession();

        Assert.assertEquals(coreRealm.getStorageImplTech(), CoreRealmStorageImplTech.NEO4J);

        ConceptionKind areaConceptionKind = coreRealm.getConceptionKind("AreaForGeospatialScaleCalculable");
        if(areaConceptionKind == null){
            areaConceptionKind = coreRealm.createConceptionKind("AreaForGeospatialScaleCalculable","AreaForTest");
        }
        areaConceptionKind.purgeAllEntities();

        Map<String,Object> newEntityValue= new HashMap<>();
        newEntityValue.put("prop1","prop1");
        newEntityValue.put("prop2","StringValue");
        ConceptionEntityValue conceptionEntityValue = new ConceptionEntityValue(newEntityValue);
        ConceptionEntity _AreaConceptionEntity = areaConceptionKind.newEntity(conceptionEntityValue,false);

        boolean exceptionShouldHappen = false;
        List<String> targetKind = new ArrayList<>();
        targetKind.add("TargetKind1");
        try {
            _AreaConceptionEntity.getSpatialPredicateMatchedConceptionEntities(targetKind, GeospatialScaleCalculable.SpatialPredicateType.Contains,
                    GeospatialScaleCalculable.SpatialScaleLevel.Country);
        }catch (CoreRealmServiceException e){
            exceptionShouldHappen = true;
        }
        Assert.assertTrue(exceptionShouldHappen);

        String pointContent1 = "POINT (109.09492 21.471273)";
        String pointContent2 = "POINT (121.293136 31.049938)";
        String pointContent3 = "POINT (121.293706 31.046605)";
        String multiPolygon1 = "MULTIPOLYGON (((121.31349767686108 31.0439725204657, 121.31336584997497 31.043917713499503, 121.31068712108755 31.044164888480562, 121.30847889658749 31.0443705730765, 121.30770761068824 31.0442946642743, 121.30644667369128 31.044010287929005, 121.30438386107444 31.043381852803456, 121.30510574848 31.041885688921198, 121.30335216647968 31.041861047141968, 121.30332442915028 31.04272675198337, 121.29718799389107 31.042481048949178, 121.29710688565628 31.04130726539117, 121.29800805172775 31.041440869890966, 121.29821078626242 31.04049187108052, 121.29402524010005 31.04071081589353, 121.29348084443512 31.040352995804326, 121.2934701136251 31.039760885130377, 121.29299611234799 31.03979090023464, 121.29296091354678 31.039566441710594, 121.29266443454833 31.03958639019495, 121.29248841964477 31.038687886098167, 121.29201669410453 31.03714595944168, 121.2916253218123 31.037278020604276, 121.28817186905532 31.0373480687797, 121.28808883554177 31.037446581764403, 121.28655349250401 31.035983515778394, 121.28565267888823 31.03666925166032, 121.28080982687199 31.041130375278122, 121.28074043732632 31.041191706837317, 121.27972527715295 31.040001368512584, 121.27429093293735 31.0448362319531, 121.27360665782558 31.04442532873545, 121.27309564793184 31.04458354156319, 121.27231565380286 31.044519170014357, 121.27163559541118 31.044658518807953, 121.27161579772849 31.044874319953106, 121.27162979759196 31.045178782412528, 121.27250716482513 31.046475647674455, 121.27320325303327 31.047872306773897, 121.27368964390419 31.049664457265315, 121.27382334441114 31.05049474004554, 121.27440969064484 31.052273299425305, 121.27463790352222 31.05375822655574, 121.27487550347237 31.05476893690268, 121.27547512841657 31.056570222721227, 121.27541037460261 31.056930886311186, 121.27497849900924 31.057196366139085, 121.27490261431296 31.057350697531536, 121.27499175929616 31.05772129233528, 121.27530094215642 31.058372230980783, 121.27533830275794 31.05879180516661, 121.2747328697426 31.061873279167177, 121.27380451697358 31.064831172716612, 121.27374007883547 31.06566433352761, 121.27339440351543 31.066843683164365, 121.27308356689522 31.06848128799327, 121.27302773286841 31.069607494071683, 121.27331433646394 31.069634860974986, 121.2734765220924 31.06957814199452, 121.2759684644713 31.069317978014826, 121.27611875711672 31.069390782269263, 121.27639017233545 31.07004714592915, 121.27645556075676 31.070661162696464, 121.27665578540793 31.071254719284113, 121.27689010905658 31.072527624702538, 121.27690337843138 31.072932921195658, 121.27717549500069 31.07370531222676, 121.27713555625714 31.074043739794526, 121.27720313557384 31.074237512396177, 121.27736776457746 31.074768945973837, 121.27748131954209 31.07550659326598, 121.27753790096955 31.07819889047706, 121.2796530370149 31.078123557652244, 121.27967419715291 31.078733749480513, 121.2799700794052 31.078732080362908, 121.2798955938249 31.079514088791758, 121.27961013723504 31.07951115861075, 121.2796111817704 31.079914579366893, 121.2798898075505 31.079917516939076, 121.27980415846937 31.080916135281363, 121.27949770680681 31.082596266597395, 121.27955269430677 31.082822879792936, 121.28211914826153 31.083324009926585, 121.28258036591137 31.083336248051058, 121.28466058245014 31.08369670260442, 121.28581943682885 31.08382541642241, 121.2870321425342 31.08418204343863, 121.28757808625419 31.08446188353288, 121.28878967017833 31.084533223185886, 121.28892913991922 31.084303394728714, 121.28912393924789 31.084289639108984, 121.28928398089866 31.083025994282302, 121.29005453087893 31.083048236636742, 121.29004344013951 31.082450449156166, 121.29287930805563 31.082459747933708, 121.29276822983532 31.082863331410223, 121.2929159131918 31.083052640297975, 121.29526428562643 31.083079475097342, 121.29537208779126 31.083082820282385, 121.29645224479921 31.08316176830843, 121.29750291754755 31.08312164289495, 121.296621468821 31.079155980378324, 121.29719639792593 31.079080343182767, 121.2971914028503 31.078661188126365, 121.29814684891171 31.078488610584316, 121.29861684436831 31.078330907007185, 121.29876524995453 31.078210319723663, 121.3000717183961 31.07777602190876, 121.30008821537783 31.07813956938379, 121.2999595815536 31.078193746482377, 121.30022323915796 31.07899521664087, 121.30320929398543 31.078652267005022, 121.3046487228028 31.080575285989035, 121.3047532394831 31.08091808416457, 121.30480853538742 31.081279315794575, 121.3046098119936 31.08187637738797, 121.30431121283038 31.082462004527677, 121.30416171085231 31.08301562579396, 121.30410379434642 31.083893538951745, 121.30452542111584 31.085686503433024, 121.30449837432994 31.086888723192022, 121.30459054892754 31.088734059659036, 121.30428827400601 31.090298885620896, 121.30431988031214 31.090406681544792, 121.3045921446038 31.091100629797005, 121.30546973268007 31.092130402397167, 121.30561125259598 31.09245658660178, 121.30567693892075 31.09313721284099, 121.30684338684306 31.093687216458942, 121.30738978815025 31.093853840058067, 121.3076369200017 31.09419224825964, 121.30780360424129 31.094249433933328, 121.30835719938715 31.094203215666163, 121.30916767826979 31.093743038494235, 121.30984553954625 31.09388287343317, 121.31008476937632 31.094092748674328, 121.31016269005336 31.09447192743103, 121.31031678619387 31.09462726473553, 121.3107751497125 31.09475525059459, 121.31177444865193 31.095481412134344, 121.31238869497275 31.095711289304482, 121.31303344062299 31.096282375950928, 121.31367246523439 31.096481345882665, 121.31400615605975 31.096680242676147, 121.314420268807 31.09734592011411, 121.3152733465814 31.097819641746437, 121.31690363594072 31.099379584946945, 121.31808749217541 31.100094993234727, 121.31809277613826 31.101316594794326, 121.31675017851413 31.100306805638343, 121.31641498654882 31.1009803457427, 121.31643940396248 31.101077896135727, 121.31556535938924 31.102291415806782, 121.31652148754738 31.103117631851593, 121.31733408994198 31.10203545609353, 121.31803629318854 31.10236353977906, 121.31834591186049 31.102460825060884, 121.31898955268919 31.10288337117094, 121.31915908917784 31.102916963434932, 121.31927978319864 31.10285682946531, 121.31968176556009 31.102317090965705, 121.3204843134015 31.10096641453739, 121.32068945126443 31.10049189996288, 121.32141183147367 31.09989083527844, 121.32188858380789 31.098598609178836, 121.32278086078962 31.097926157151342, 121.32308838206113 31.097242582472695, 121.32334666169305 31.09694525616781, 121.32391677154388 31.095966235195885, 121.32442325245498 31.09560196195569, 121.32822400780421 31.097009157579198, 121.32932270243684 31.097555210128938, 121.3286009998079 31.098767676558037, 121.330356990612 31.099444519677526, 121.3300074269882 31.10035125430791, 121.3298170632883 31.100307183006336, 121.32965359747031 31.100742943707964, 121.33085467107857 31.101193096476173, 121.33061791968765 31.101762662961523, 121.33155071255702 31.101891039128137, 121.33228954300193 31.102076096154192, 121.33342097411087 31.10220274975001, 121.33491981823633 31.102886132888077, 121.33551709531072 31.10360154477473, 121.3360813453363 31.104126956599657, 121.33636549537678 31.103823018226617, 121.33671394798365 31.10345419511648, 121.33693486125641 31.10337705149174, 121.33734049090337 31.10227718758787, 121.33819547622095 31.10126139567309, 121.33902278648426 31.100521268611185, 121.33949089368538 31.099807901685004, 121.34005927134623 31.098528295654635, 121.34016344747631 31.098467385999175, 121.34345269206867 31.09978872714411, 121.3441643093373 31.0999435875167, 121.34604129496059 31.10016247527961, 121.34611745108687 31.10019732975676, 121.34604628997019 31.10056292384214, 121.34612637607545 31.100850440965917, 121.34667456570509 31.101029453992428, 121.34898990547113 31.101524779778334, 121.3503791605299 31.101809225568545, 121.35203072846447 31.102136886713705, 121.35367156645057 31.102605118343842, 121.35379948061546 31.10255606345853, 121.3540686417224 31.102022124390814, 121.35425623191662 31.101616140235297, 121.35441684628553 31.101546254650795, 121.35641457189868 31.10214810712323, 121.35791654675859 31.102374829498707, 121.35847467065861 31.101553613012356, 121.35876545634531 31.10065761900309, 121.35921432539566 31.10013611566399, 121.35934948771467 31.09959261002742, 121.36007695411875 31.098042831619512, 121.36032244160836 31.097519221305845, 121.36057230497194 31.096278795664816, 121.36072290238647 31.0960014338535, 121.36082425176718 31.09590449580511, 121.36139314757155 31.09573310225455, 121.36133929216386 31.095148688476957, 121.36172422495314 31.094640891543804, 121.36178533443466 31.09446018226153, 121.36175049094527 31.094274577383683, 121.36156687384326 31.094002121165975, 121.36155538880442 31.09382889499278, 121.36127225255835 31.0932591239992, 121.36131575181531 31.093080689060603, 121.3614792794664 31.092925642872906, 121.36165501496895 31.09290640334339, 121.36175347268414 31.09303578548442, 121.36183253460614 31.093046013114083, 121.36197484913433 31.093034380048007, 121.3621646088916 31.09294819961789, 121.36237630813102 31.092675972152914, 121.36278423349498 31.092405619830608, 121.36295066831156 31.091964265926112, 121.36321180553284 31.091666666640837, 121.36330729164409 31.091206597196518, 121.36368923608903 31.090911458308128, 121.36418402775632 31.08973524303099, 121.36455729164568 31.08906901039258, 121.36600694442527 31.085683593727765, 121.36637152775901 31.085206163172668, 121.36695312498195 31.083168402756723, 121.36725694442677 31.082471788173766, 121.36771701387175 31.080538194424328, 121.3660503472031 31.07989583331112, 121.36502604164626 31.080566406226477, 121.36419697103096 31.081064798881908, 121.36399582914726 31.08099101882029, 121.36339728425104 31.080771473748182, 121.36331144315653 31.08074000900478, 121.36327773446908 31.08072762258857, 121.36314962149 31.080680582367894, 121.36309514238435 31.08066032145081, 121.3630455531008 31.08064186241668, 121.36293887663723 31.080602154384653, 121.36234045948495 31.080379403496714, 121.36195430125085 31.08023565116102, 121.36131430527215 31.08000410789993, 121.36088090472421 31.07984735440672, 121.36047638360392 31.079255104170787, 121.36010805575637 31.07906290013902, 121.36057349889373 31.07824069190402, 121.3588278178515 31.077520795436946, 121.35895361154955 31.077257949817653, 121.35886917457103 31.07714906205013, 121.35921384500188 31.07649595043778, 121.35941727554365 31.076051020172542, 121.35937847163927 31.07598109936886, 121.35855235789771 31.075697776130674, 121.35772519993408 31.075242488002292, 121.35722288635314 31.074864775506303, 121.35723151930642 31.074759611523035, 121.35753590159248 31.074423980845, 121.35818710381345 31.07342560542473, 121.35856084299107 31.073137906465163, 121.35901546792051 31.072515206325527, 121.3595451932663 31.072009329722015, 121.35853654034224 31.07159586116272, 121.35869251518636 31.07136463053262, 121.3585746647623 31.071199397526094, 121.35884098030219 31.07071667934103, 121.35524350320254 31.06938251294076, 121.35496179582984 31.069480836167884, 121.35471635294671 31.069898239818734, 121.35286926325611 31.069160930181212, 121.35280206528223 31.069285441806276, 121.3525829045825 31.069219697086595, 121.35262603004485 31.069093246714232, 121.35196460374253 31.068872637474232, 121.35241954787853 31.06783242292186, 121.35261506946566 31.067027683389952, 121.35277390419878 31.066690649247487, 121.35310879665688 31.06630537881695, 121.35325577741642 31.065957842041968, 121.35265470530868 31.065698895712078, 121.35201090823723 31.065189161838486, 121.35164983362125 31.06514344976764, 121.35046785732163 31.064653898832578, 121.34831595543648 31.063634469544535, 121.3412352532956 31.061699579982378, 121.3399572017918 31.061389915942517, 121.33786773371423 31.06102997652095, 121.33759849043795 31.06338803171138, 121.33751404270943 31.063804382202008, 121.33718244524442 31.064459201404702, 121.33713208974466 31.06525012402777, 121.33707425050545 31.06534593816697, 121.33489793043495 31.064799383911215, 121.33503197472278 31.064034387223693, 121.33358697326419 31.06373967044746, 121.333379731552 31.063615395975532, 121.33331793836781 31.063763478890607, 121.33322455255879 31.063724349092375, 121.33287897461231 31.064175379392314, 121.33206902205809 31.063994957203178, 121.33185058747269 31.064569875327354, 121.33168350111461 31.065327741103793, 121.3311544125538 31.065418160102855, 121.33084156198855 31.065419567230116, 121.3304227063163 31.065959339677303, 121.32981882948408 31.066989416602247, 121.32116073675108 31.062175519296154, 121.31573210071163 31.059203731106003, 121.30880523906328 31.055272424282908, 121.30690747052304 31.053931028798324, 121.3074876887957 31.053531455878087, 121.30792238635915 31.053388395890273, 121.31391039661762 31.05262449591256, 121.31349767686108 31.0439725204657)))";

        _AreaConceptionEntity.addOrUpdateLLGeometryContent(multiPolygon1);

        ConceptionKind locationConceptionKind = coreRealm.getConceptionKind("LocationForGeospatialScaleCalculable");
        if(locationConceptionKind == null){
            locationConceptionKind = coreRealm.createConceptionKind("LocationForGeospatialScaleCalculable","locationForTest");
        }
        locationConceptionKind.purgeAllEntities();


        Map<String,Object> newLocationEntityValue= new HashMap<>();
        newLocationEntityValue.put("prop1","prop1");

        ConceptionEntityValue conceptionEntityValue2 = new ConceptionEntityValue(newLocationEntityValue);
        ConceptionEntity _LocationConceptionEntity1 = areaConceptionKind.newEntity(conceptionEntityValue2,false);

        boolean spatialPredicateMatchedCheckResult = _AreaConceptionEntity.isSpatialPredicateMatchedWith(GeospatialScaleCalculable.SpatialPredicateType.Contains,_LocationConceptionEntity1.getConceptionEntityUID(), GeospatialScaleCalculable.SpatialScaleLevel.Local);
        Assert.assertFalse(spatialPredicateMatchedCheckResult);

        _LocationConceptionEntity1.addOrUpdateLLGeometryContent(pointContent1);
        spatialPredicateMatchedCheckResult = _AreaConceptionEntity.isSpatialPredicateMatchedWith(GeospatialScaleCalculable.SpatialPredicateType.Disjoint,_LocationConceptionEntity1.getConceptionEntityUID(), GeospatialScaleCalculable.SpatialScaleLevel.Local);
        Assert.assertTrue(spatialPredicateMatchedCheckResult);

    }
}
