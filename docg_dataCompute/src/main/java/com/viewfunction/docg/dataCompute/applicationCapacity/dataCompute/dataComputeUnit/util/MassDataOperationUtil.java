package com.viewfunction.docg.dataCompute.applicationCapacity.dataCompute.dataComputeUnit.util;

import com.google.common.collect.Lists;

import com.viewfunction.docg.dataCompute.applicationCapacity.dataCompute.dataComputeUnit.dataService.DataServiceInvoker;
import com.viewfunction.docg.dataCompute.applicationCapacity.dataCompute.dataComputeUnit.dataService.DataSlice;
import com.viewfunction.docg.dataCompute.computeServiceCore.payload.DataSliceMetaInfo;
import com.viewfunction.docg.dataCompute.computeServiceCore.payload.DataSliceOperationResult;
import com.viewfunction.docg.dataCompute.computeServiceCore.internal.ignite.exception.ComputeGridNotActiveException;
import org.apache.ignite.Ignite;
import org.apache.ignite.Ignition;
import org.apache.ignite.configuration.IgniteConfiguration;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class MassDataOperationUtil {

    public static DataSliceOperationResult massInsertSliceData(DataServiceInvoker controlDataServiceInvoker,String dataSliceName, List<Map<String, Object>> sliceDataList,List<String> dataProperties,String autoGeneratedPKName,int degreeOfParallelism){
        DataSliceOperationResult dataSliceOperationResult = new DataSliceOperationResult();
        if(sliceDataList != null){
            int totalResultEntitiesCount = sliceDataList.size();
            int singlePartitionSize = (totalResultEntitiesCount/degreeOfParallelism)+1;
            List<List<Map<String, Object>>> rsList = Lists.partition(sliceDataList, singlePartitionSize);

            ExecutorService executor = Executors.newFixedThreadPool(rsList.size());
            for(int i = 0;i < rsList.size(); i++){
                List<Map<String, Object>> currentEntityValueList = rsList.get(i);
                DataSliceDataInsertDataThread dataSliceDataInsertDataThread = new DataSliceDataInsertDataThread(i,dataSliceName,dataProperties,currentEntityValueList,autoGeneratedPKName);
                executor.execute(dataSliceDataInsertDataThread);
            }
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            DataSlice targetDataSlice = controlDataServiceInvoker.getDataSlice(dataSliceName);
            DataSliceMetaInfo dataSliceMetaInfo = targetDataSlice.getDataSliceMetaInfo();
            int successDataCount = dataSliceMetaInfo.getPrimaryDataCount() + dataSliceMetaInfo.getBackupDataCount();
            dataSliceOperationResult.setSuccessItemsCount(successDataCount);
            dataSliceOperationResult.setFailItemsCount(totalResultEntitiesCount-successDataCount);
        }
        dataSliceOperationResult.finishOperation();
        dataSliceOperationResult.setOperationSummary("Load ConceptionKind Entities To DataSlice Operation");
        return dataSliceOperationResult;
    }

    private static class DataSliceDataInsertDataThread implements Runnable{
        private String dataSliceName;
        private List<String> sliceDataProperties;
        private List<Map<String, Object>> sliceDataRows;
        private String autoGeneratedPKName;
        private int threadId;

        public DataSliceDataInsertDataThread(int threadId,String dataSliceName, List<String> sliceDataProperties,List<Map<String, Object>> sliceDataRows,String autoGeneratedPKName){
            this.dataSliceName = dataSliceName;
            this.sliceDataProperties = sliceDataProperties;
            this.sliceDataRows = sliceDataRows;
            this.autoGeneratedPKName = autoGeneratedPKName;
            this.threadId = threadId;
        }

        @Override
        public void run() {
            if(autoGeneratedPKName != null){
                for(int i=0;i<sliceDataRows.size();i++){
                    String currentRowPK = "pk"+this.threadId+"_"+i;
                    Map<String, Object> currentEntityValueMap = sliceDataRows.get(i);
                    currentEntityValueMap.put(autoGeneratedPKName,currentRowPK);
                }
            }

            IgniteConfiguration igniteConfiguration= new IgniteConfiguration();
            igniteConfiguration.setClientMode(true);
            igniteConfiguration.setIgniteInstanceName("DataSliceDataInsertDataThread_"+threadId);
            Ignite invokerIgnite = Ignition.start(igniteConfiguration);

            try(DataServiceInvoker dataServiceInvoker = DataServiceInvoker.getInvokerInstance(invokerIgnite)){
                DataSlice targetDataSlice = dataServiceInvoker.getDataSlice(this.dataSliceName);
                DataSliceOperationResult dataSliceOperationResult = targetDataSlice.addDataRecords(this.sliceDataProperties,this.sliceDataRows);
                System.out.println("--------------------------------------");
                System.out.println("Execution result of : "+"DataSliceDataInsertDataThread_"+threadId);
                System.out.println(dataSliceOperationResult.getOperationSummary());
                System.out.println(dataSliceOperationResult.getStartTime());
                System.out.println(dataSliceOperationResult.getFinishTime());
                System.out.println(dataSliceOperationResult.getSuccessItemsCount());
                System.out.println(dataSliceOperationResult.getFailItemsCount());
                System.out.println("--------------------------------------");
            } catch (ComputeGridNotActiveException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
